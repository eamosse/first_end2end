package first.endtoend;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.cookie.Cookie;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;

import com.androidquery.AQuery;
import com.androidquery.callback.AjaxCallback;
import com.androidquery.callback.AjaxStatus;

import first.endtoend.adapters.ConfirmationAdapter;
import first.endtoend.models.PortfolioDetail;
import first.endtoend.models.Transaction;
import first.endtoend.utils.AppStatus;
import first.endtoend.utils.Constant;
import first.endtoend.utils.JsonHelper;
import first.endtoend.utils.ProgressDialogHelper;
import first.endtoend.utils.ResponseStatus;


public class ConfirmationSupplyActivity extends MyActivity implements LocationListener {

	ImageView img;
	String imageFilePath;
	File imageFile;
	String tmp;
	Transaction transaction;
	ConfirmationAdapter adapter;
	List<PortfolioDetail> productsSeleted;
	Button completeBtn, backBtn;
	private LocationManager lm;
	@SuppressWarnings("unused")
	private Location location;
	public ProgressDialog progressDialog;
	public ResponseStatus responseStatus;
	AlertDialog.Builder alert;

	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_confirmation);
		progressDialog = new ProgressDialog(this);
		transaction = new Transaction();

		TextView agentName = (TextView) findViewById(R.id.agentName);
		agentName.setText("FI Agent : "+LoginActivity.user.getFirstName()+" "+LoginActivity.user.getLastName());


		productsSeleted = TagActivity.family.getPortfolio().getProductsSelected();

		adapter = new ConfirmationAdapter(ConfirmationSupplyActivity.this, productsSeleted);
		ListView listeview = (ListView) findViewById(R.id.listViewConfirm);
		listeview.setAdapter(adapter);

		completeBtn = (Button) findViewById(R.id.validBtnConfirm);
		completeBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {

				alert = new AlertDialog.Builder(ConfirmationSupplyActivity.this);
				if(transaction.getPhoto() != null){
					alert.setTitle(R.string.agreement);
					alert.setIcon(R.drawable.agreementicon);
					alert.setMessage(R.string.agreement_message);
					alert.setPositiveButton(R.string.yes, new DialogInterface.OnClickListener() {					
						@Override
						public void onClick(DialogInterface dialog, int which) {
							async_get();						
						}
					});

					alert.setNegativeButton(R.string.no, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int which) {
							dialog.dismiss();						
						}
					});
				}
				else{
					alert.setTitle(R.string.warning);
					alert.setIcon(android.R.drawable.ic_dialog_alert);
					alert.setMessage(R.string.no_photo_message);
					alert.setPositiveButton(R.string.ok, new DialogInterface.OnClickListener() {					
						@Override
						public void onClick(DialogInterface dialog, int which) {
							dialog.dismiss();						
						}
					});

				}
				alert.show();

			}
		});


		backBtn = (Button) findViewById(R.id.backBtnConfirm);
		backBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				onBackPressed();
			}
		});

		this.photo();

	}

	@Override
	protected void onResume() {
		super.onResume();
		lm = (LocationManager) this.getSystemService(LOCATION_SERVICE);
		if (lm.isProviderEnabled(LocationManager.GPS_PROVIDER)){
			lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0,this);
		}else{
			lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0,this);
		}
	}

	@Override
	protected void onPause() {
		super.onPause();
		lm.removeUpdates(this);
	}

	//decodes image and scales it to reduce memory consumption
	public Bitmap decodeFile(File f){
		try {
			//Decode image size
			BitmapFactory.Options o = new BitmapFactory.Options();
			o.inJustDecodeBounds = true;
			BitmapFactory.decodeStream(new FileInputStream(f),null,o);

			//The new size we want to scale to
			final int REQUIRED_SIZE=70;

			//Find the correct scale value. It should be the power of 2.
			int width_tmp=o.outWidth, height_tmp=o.outHeight;
			int scale=1;
			while(true){
				if(width_tmp/2<REQUIRED_SIZE || height_tmp/2<REQUIRED_SIZE)
					break;
				width_tmp/=2;
				height_tmp/=2;
				scale*=2;
			}

			//Decode with inSampleSize
			BitmapFactory.Options o2 = new BitmapFactory.Options();
			o2.inSampleSize=scale;
			return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
		} catch (FileNotFoundException e) {}
		return null;
	}


	public void photo() {

		imageFilePath = Environment.getExternalStorageDirectory().getAbsolutePath() + "/tmp_image.jpg";
		img = (ImageView) findViewById(R.id.photo);
		img.setOnClickListener(new View.OnClickListener() {


			public void onClick(View v) {
				imageFile = new File(imageFilePath);
				Uri imageFileUri = Uri.fromFile(imageFile);
				Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
				intent.putExtra(android.provider.MediaStore.EXTRA_OUTPUT, imageFileUri);
				startActivityForResult(intent, 0);

			}
		});
	}


	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		switch (requestCode) {
		case 0:

			if (resultCode == RESULT_OK) {
				Bitmap bmp = decodeFile(imageFile);
				Bitmap bmpcomp = Bitmap.createScaledBitmap(bmp, 150, 150, true);

				// create a matrix object
				Matrix matrix = new Matrix();
				matrix.postRotate(90); // rotate of 90ï¿½ in clock wise
				//				 
				// create a new bitmap from the original using the matrix to transform the result
				Bitmap rotatedBitmap = Bitmap.createBitmap(bmpcomp, 0, 0,
						bmpcomp.getWidth(), bmpcomp.getHeight(), matrix, true);
				img.setImageBitmap(rotatedBitmap);

				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				rotatedBitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
				byte[] b = baos.toByteArray();
				tmp = Base64.encodeToString(b, Base64.DEFAULT);
				transaction.setPhoto(tmp);
			}
			break;
		}

	}

	@Override
	public void onBackPressed() {
		super.onBackPressed();
		Intent intent = new Intent(ConfirmationSupplyActivity.this, SupplyActivity.class);
		startActivity(intent);
		finish();
	}

	@Override
	public void onLocationChanged(Location location) {
		this.location = location;
		lm.removeUpdates(this);
		transaction.setLatitude(location.getLatitude());
		transaction.setLongitude(location.getLongitude());
		transaction.setAccuracy(location.getAccuracy());

	}


	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub

	}


	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub

	}


	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub

	}

	public void async_get() {
		if (AppStatus.getInstance(ConfirmationSupplyActivity.this).isOnline(ConfirmationSupplyActivity.this)) {
			transaction.setDate(new Date(System.currentTimeMillis()));
			transaction.setFamily(TagActivity.family);
			transaction.setTagId(TagActivity.idTag);
			transaction.setAgentId(LoginActivity.user.getId());
			String url = getString(R.string.url) + getString(R.string.sendData);
			Map<String, Object> params = new HashMap<String, Object>();
			if((transaction.getLatitude() == 0) || (transaction.getLongitude() ==0)){
				alert = new AlertDialog.Builder(ConfirmationSupplyActivity.this);
				alert.setTitle(R.string.code_500);
				alert.setIcon(android.R.drawable.ic_delete);
				alert.setMessage(R.string.location_failed_message2);
				alert.setPositiveButton(R.string.retry, new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
					}
				});
				alert.show();

			}
			else{

				JSONObject ob = JsonHelper.createJsonObject(transaction);
				params.put(Constant.TRANSACTION_KEY, ob.toString());
				AQuery aq = new AQuery(getApplicationContext());
				
				ProgressDialog dialog = new ProgressDialog(ConfirmationSupplyActivity.this);
				dialog.setIndeterminate(true);
				dialog.setCancelable(true);
				dialog.setInverseBackgroundForced(false);
				dialog.setCanceledOnTouchOutside(true);
				dialog.setTitle(R.string.sending);
				dialog.setMessage(getString(R.string.wait));
				
				AjaxCallback<String> cb = new AjaxCallback<String>() {
					@Override
					public void callback(String url, String json, AjaxStatus status) {
						switch (status.getCode()) {
						case 200:
							if (!status.getCookies().isEmpty())
								LoginActivity.cookies = status.getCookies();
							System.out.println(json);
							int code = JsonHelper.getResponseCodeFromJson(json);
							switch(code){
							case 200:
								alert = new AlertDialog.Builder(ConfirmationSupplyActivity.this);
								alert.setTitle(R.string.SuccessTransaction);
								alert.setMessage(R.string.SuccessTransactionMessage);
								alert.setIcon(R.drawable.successicon);
								alert.setPositiveButton(R.string.start, new DialogInterface.OnClickListener() {
									@Override
									public void onClick(DialogInterface dialog, int which) {
										Intent intent = new Intent(ConfirmationSupplyActivity.this, TagActivity.class);
										startActivity(intent);
										finish();
									}
								});
								alert.setNegativeButton(R.string.quit, new DialogInterface.OnClickListener() {

									@Override
									public void onClick(DialogInterface dialog, int which) {
										ProgressDialogHelper.processingDisconnection(progressDialog, ConfirmationSupplyActivity.this);
									}
								});
								alert.show();
								break;
							default:
								//TODO: Handle error on sync transac
							}
						}
					}
				};
				if (LoginActivity.cookies != null)
					for (Cookie cookie : LoginActivity.cookies) {
						Log.v("Adding cookie", cookie.getName() + " Value " + cookie.getValue());
						cb.cookie(cookie.getName(), cookie.getValue());
					}
				aq.progress(dialog).ajax(url, params, String.class, cb);
			}
		}

	}

}
