package first.endtoend;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.http.NameValuePair;
import org.apache.http.cookie.Cookie;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.nfc.NdefMessage;
import android.nfc.NdefRecord;
import android.nfc.NfcAdapter;
import android.os.Bundle;
import android.os.Parcelable;
import android.os.Vibrator;
import android.preference.PreferenceManager;
import android.util.Log;
import android.widget.TextView;

import com.androidquery.AQuery;
import com.androidquery.callback.AjaxCallback;
import com.androidquery.callback.AjaxStatus;

import first.endtoend.models.Family;
import first.endtoend.models.Transaction;
import first.endtoend.utils.AppStatus;
import first.endtoend.utils.Constant;
import first.endtoend.utils.JsonHelper;
import first.endtoend.utils.ProgressDialogHelper;
import first.endtoend.utils.RequestHelper;
import first.endtoend.utils.ResponseStatus;


public class TagActivity extends MyActivity implements LocationListener {


	public static String idTag;
	@SuppressWarnings("unused")
	private Location location;
	String soundOrVib;
	Resources res;
	Transaction transaction;
	private LocationManager lm;
	ResponseStatus responseStatus;
	String messageReceived;
	public ProgressDialog progressDialog;
	public static Family family;
	AlertDialog.Builder alert;

	/**
	 * Called when the activity is first created.
	 */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		progressDialog = new ProgressDialog(this);
		transaction = new Transaction();
		setContentView(R.layout.activity_tag);
		transaction.setAgentId(LoginActivity.user.getId());
		SharedPreferences mgr = PreferenceManager.getDefaultSharedPreferences(this);
		soundOrVib = mgr.getString("sound", "default");
		resolveIntent(getIntent());
		res = getResources();

		TextView agentName = (TextView) findViewById(R.id.agentName);
		agentName.setText("FI Agent : "+LoginActivity.user.getFirstName()+" "+LoginActivity.user.getLastName());

	}

	@Override
	protected void onResume() {
		super.onResume();
		NfcAdapter mAdapter = NfcAdapter.getDefaultAdapter(this);
		PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, new Intent(this, this.getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);
		mAdapter.enableForegroundDispatch(this, pendingIntent, null, null);
		lm = (LocationManager) this.getSystemService(LOCATION_SERVICE);
		if (lm.isProviderEnabled(LocationManager.GPS_PROVIDER)){
			lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0,this);
		}else{
			lm.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0,this);
		}

	}

	@Override
	public void onNewIntent(Intent intent) {
		setIntent(intent);
		resolveIntent(intent);
	}


	@Override
	protected void onPause() {
		super.onPause();
		lm.removeUpdates(this);
	}

	public void async_get()
	{
		if (AppStatus.getInstance(TagActivity.this).isOnline(TagActivity.this)) {
			transaction.setTagId(idTag);
			transaction.setDate(new Date(System.currentTimeMillis()));

			if((transaction.getLatitude() == 0) || (transaction.getLongitude() ==0)){
				alert = new AlertDialog.Builder(TagActivity.this);
				alert.setTitle(R.string.code_500);
				alert.setIcon(android.R.drawable.ic_delete);
				alert.setMessage(R.string.location_failed_message1);
				alert.setPositiveButton(R.string.retry, new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						dialog.dismiss();
					}
				});
				alert.show();

			}
			else{
				try {
					JSONObject ob = JsonHelper.createJsonObject(transaction);
					System.out.println(ob);
					Map<String, Object> params = new HashMap<String, Object>();
					params.put(Constant.TRANSACTION_KEY, ob.toString());
					String url = getString(R.string.url)+getString(R.string.getData);
					ProgressDialog dialog = new ProgressDialog(this);
					AQuery aq = new AQuery(getApplicationContext());
					dialog.setIndeterminate(true);
					dialog.setCancelable(true);
					dialog.setInverseBackgroundForced(false);
					dialog.setCanceledOnTouchOutside(true);
					dialog.setTitle(R.string.sending);
					dialog.setMessage(getString(R.string.wait));
					AjaxCallback<String> cb = new AjaxCallback<String>() {
						@Override
						public void callback(String url, String json, AjaxStatus status) {
							switch (status.getCode()){

							case Constant.REQUEST_OK:
								if(!status.getCookies().isEmpty())
									LoginActivity.cookies =   status.getCookies();
								System.out.println(json);														
								int code = JsonHelper.getResponseCodeFromJson(json);
								switch(code){
								case Constant.REQUEST_OK:
									family = (Family) JsonHelper.getObjectFromJson(json, Family.class, Constant.FAMILY);

									Intent intent = new Intent(TagActivity.this, ListBeneficiariesActivity.class);
									startActivity(intent);
									finish();
									break;

								case Constant.NOT_FOUND:
									alert = new AlertDialog.Builder(TagActivity.this);
									alert.setTitle(R.string.code_404);
									alert.setIcon(android.R.drawable.ic_delete);
									alert.setMessage(R.string.familyNotFound);
									alert.setPositiveButton(R.string.cancel, new DialogInterface.OnClickListener() {

										@Override
										public void onClick(DialogInterface dialog, int which) {
											dialog.dismiss();
										}
									});
									alert.show();

									break;

								case Constant.FAMILY_ERROR:
									alert = new AlertDialog.Builder(TagActivity.this);
									alert.setTitle(R.string.code_501);
									alert.setIcon(android.R.drawable.ic_delete);
									alert.setMessage(R.string.code_501_message);
									alert.setPositiveButton(R.string.close, new DialogInterface.OnClickListener() {
										@Override
										public void onClick(DialogInterface dialog, int which) {
											return;
										}
									});
									alert.show();

									break;



								default:
									alert = new AlertDialog.Builder(TagActivity.this);
									alert.setTitle(R.string.code_500);
									alert.setIcon(android.R.drawable.ic_delete);
									alert.setMessage(R.string.server_error);
									alert.setPositiveButton(R.string.retry, new DialogInterface.OnClickListener() {

										@Override
										public void onClick(DialogInterface dialog, int which) {
											dialog.dismiss();
										}
									});
									alert.show();

									break;
								}
								break;

							case Constant.NOT_FOUND:
								alert = new AlertDialog.Builder(TagActivity.this);
								alert.setTitle(R.string.code_500);
								alert.setIcon(android.R.drawable.ic_delete);
								alert.setMessage(R.string.server_error);
								alert.setPositiveButton(R.string.retry, new DialogInterface.OnClickListener() {

									@Override
									public void onClick(DialogInterface dialog, int which) {
										dialog.dismiss();
									}
								});
								alert.show();

								break;

							default:
								alert = new AlertDialog.Builder(TagActivity.this);
								alert.setTitle(R.string.code_500);
								alert.setIcon(android.R.drawable.ic_delete);
								alert.setMessage(R.string.server_error1);
								alert.setPositiveButton(R.string.retry, new DialogInterface.OnClickListener() {

									@Override
									public void onClick(DialogInterface dialog, int which) {
										dialog.dismiss();
									}
								});
								alert.show();
								break;

							}
						}
					};
					if(LoginActivity.cookies!=null )
						for(Cookie cookie : LoginActivity.cookies){
							Log.v("Adding cookie", cookie.getName() + " Value " + cookie.getValue());
							cb.cookie(cookie.getName(), cookie.getValue());
						}
					aq.progress(dialog).ajax(url,params, String.class, cb);
				}
				catch(Exception e){
					e.printStackTrace();

				}
			}
		}else{
			//TODO:Handle No network access
		}
	}


	void resolveIntent(Intent intent) {
		// Parse the intent
		String action = intent.getAction();
		if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)) {
			Parcelable[] rawMsgs = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
			NdefMessage[] messages = null;
			if (rawMsgs != null) {
				messages = new NdefMessage[rawMsgs.length];
				for (int i = 0; i < rawMsgs.length; i++) {
					messages[i] = (NdefMessage) rawMsgs[i];
				}
				if (messages.length != 0) {
					//for (int i = 0; i < messages.length; i++) {
					NdefRecord record = messages[0].getRecords()[0];
					String message = getTextData(record.getPayload());
					idTag = message;
					//playSound();
					//}
					async_get();
				}
			}
		}
	}

	String getTextData(byte[] payload) {
		String textEncoding = ((payload[0] & 0200) == 0) ? "UTF-8" : "UTF-16";
		int languageCodeLength = payload[0] & 0077;
		try {
			return new String(payload,languageCodeLength+1,payload.length - languageCodeLength - 1, textEncoding);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		return "";

	}

	protected void playSound() {

		Vibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
		// Vibrate for 1000 milliseconds
		long milliseconds = 1000;
		v.vibrate(milliseconds);

		//MediaPlayer mp = MediaPlayer.create(this, R.raw.beep);
		//mp.start();

	}


	protected void processTag(String message) {
		playSound();
		idTag = message;
		if (AppStatus.getInstance(TagActivity.this).isOnline(TagActivity.this)) {	
			transaction.setTagId(idTag);
			transaction.setDate(new Date(System.currentTimeMillis()));
			String url = getString(R.string.url)+getString(R.string.getData);

			try {
				JSONObject ob = JsonHelper.createJsonObject(transaction);
				System.out.println(ob);
				List<NameValuePair> liste = new ArrayList<NameValuePair>();
				liste.add(new BasicNameValuePair("Transaction", ob.toString()));
				responseStatus = RequestHelper.postRequest(liste, url);
			}
			catch(Exception e){
				e.printStackTrace();
			}
		}
	}

	@Override
	public void onLocationChanged(Location location) {
		this.location = location;
		lm.removeUpdates(this);
		transaction.setLatitude(location.getLatitude());
		transaction.setLongitude(location.getLongitude());
		transaction.setAccuracy(location.getAccuracy());

	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub

	}



	/**
	 * overriding Action to do when click on phone back button
	 */
	@Override 
	public void onBackPressed() {
		alert = new AlertDialog.Builder(this);
		alert.setMessage(getString(R.string.quitconfirm)+" "+getString(R.string.logout_message));
		alert.setPositiveButton(R.string.confirm, new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dlg, int sumthin) {
				ProgressDialogHelper.processingDisconnection(progressDialog, TagActivity.this);
			}
		});
		alert.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {
				dialog.dismiss();
			}
		});
		alert.show();
	}
}