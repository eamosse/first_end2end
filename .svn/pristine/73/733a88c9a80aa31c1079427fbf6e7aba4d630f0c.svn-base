package first.endtoend;

import java.io.UnsupportedEncodingException;

import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.nfc.NdefMessage;
import android.nfc.NdefRecord;
import android.nfc.NfcAdapter;
import android.os.Bundle;
import android.os.Parcelable;
import android.os.Vibrator;
import android.view.Window;

public abstract class tagnfc extends Activity implements LocationListener {
    public static String idtag;
    Context context;
    private LocationManager lManager;
	@SuppressWarnings("unused")
	private Location location;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        context = this;
        requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
    }

    @Override
	protected void onResume() {
        super.onResume();
        NfcAdapter mAdapter = NfcAdapter.getDefaultAdapter(this);
        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, new Intent(this, this.getClass()).addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP), 0);
        mAdapter.enableForegroundDispatch(this, pendingIntent, null, null);
        lManager = (LocationManager) this.getSystemService(LOCATION_SERVICE);

		lManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 10000, 0,this);

    }

    void resolveIntent(Intent intent) {
        // Parse the intent
        String action = intent.getAction();
        if (NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)) {
            //Tag tag = (Tag) intent.getParcelableExtra(NfcAdapter.EXTRA_TAG);
            //byte[] id = intent.getByteArrayExtra(NfcAdapter.EXTRA_ID);
            Parcelable[] rawMsgs = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
            NdefMessage[] messages = null;
            if (rawMsgs != null) {
                messages = new NdefMessage[rawMsgs.length];
                for (int i = 0; i < rawMsgs.length; i++) {
                    messages[i] = (NdefMessage) rawMsgs[i];
                }
                if (messages.length != 0) {
                    for (int i = 0; i < messages.length; i++) {
                        NdefRecord record = messages[0].getRecords()[0];
                        //byte[] id2 = record.getId();
                        //short tnf = record.getTnf();
                        //byte[] type = record.getType();
                        String message = getTextData(record.getPayload());
                        idtag = message;
                        //playSound();
                    }
                    processTag(idtag);
                }
            }
        }
    }
    
    String getTextData(byte[] payload) {
        String textEncoding = ((payload[0] & 0200) == 0) ? "UTF-8" : "UTF-16";
          int languageCodeLength = payload[0] & 0077;
          try {
            return new String(payload,languageCodeLength+1,payload.length - languageCodeLength - 1, textEncoding);
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }
          return "";
        
    }

    protected void playSound() {

        Vibrator v = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
        // Vibrate for 1000 milliseconds
        long milliseconds = 1000;
        v.vibrate(milliseconds);

        //MediaPlayer mp = MediaPlayer.create(this, R.raw.beep);
        //mp.start();

    }

    protected abstract void processTag(String message);

    @Override
    public void onNewIntent(Intent intent) {
        setIntent(intent);
        resolveIntent(intent);
    }
    
//    private void afficherAdresse() {
//		setProgressBarIndeterminateVisibility(true);
//
//		//Le geocoder permet de récupérer ou chercher des adresses
//		//gràce à un mot clé ou une position
//		Geocoder geo = new Geocoder(tagnfc.this);
//		try {
//			//Ici on récupère la premiere adresse trouvé gràce à la position que l'on a récupéré
//			List <Address> adresses = geo.getFromLocation(location.getLatitude(),location.getLongitude(),1);
//
//			if(adresses != null && adresses.size() == 1){
//				Address adresse = adresses.get(0);
//				//Si le geocoder a trouver une adresse, alors on l'affiche
//				Toast.makeText(this,adresse.getAddressLine(0)+" "+adresse.getPostalCode()+" "+adresse.getLocality() , Toast.LENGTH_LONG).show();
//						
//			}
//			else {
//				//sinon on affiche un message d'erreur
//				Toast.makeText(this,"L'adresse n'a pu être déterminée" , Toast.LENGTH_LONG).show();
//			}
//		} catch (IOException e) {
//			e.printStackTrace();
//			Toast.makeText(this,"L'adresse n'a pu être déterminée" , Toast.LENGTH_LONG).show();
//		}
//		//on stop le cercle de chargement
//		setProgressBarIndeterminateVisibility(false);
//	}
    
    @Override
	protected void onPause() {
		super.onPause();
		lManager.removeUpdates(this);
	}
    
    @Override
	public void onLocationChanged(Location location) {
    	setProgressBarIndeterminateVisibility(false);
    	this.location = location;
    	lManager.removeUpdates(this);
	}

	@Override
	public void onProviderDisabled(String provider) {
		// TODO Auto-generated method stub
		lManager.removeUpdates(this);
		//... on stop le cercle de chargement
		setProgressBarIndeterminateVisibility(false);

	}

	@Override
	public void onProviderEnabled(String provider) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onStatusChanged(String provider, int status, Bundle extras) {
		// TODO Auto-generated method stub

	}

}
